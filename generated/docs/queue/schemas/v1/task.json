{
  "$schema": "/schemas/common/metaschema.json#",
  "title": "Task Definition Response",
  "description": "Definition of a task that can be scheduled\n",
  "type": "object",
  "properties": {
    "provisionerId": {
      "title": "Provisioner Id",
      "description": "Unique identifier for a provisioner, that can supply specified\n`workerType`\n",
      "type": "string",
      "minLength": 1,
      "maxLength": 22,
      "pattern": "^([a-zA-Z0-9-_]*)$"
    },
    "workerType": {
      "title": "Worker Type",
      "description": "Unique identifier for a worker-type within a specific provisioner\n",
      "type": "string",
      "minLength": 1,
      "maxLength": 22,
      "pattern": "^([a-zA-Z0-9-_]*)$"
    },
    "schedulerId": {
      "title": "Scheduler Identifier",
      "description": "All tasks in a task group must have the same `schedulerId`. This is used for several purposes:\n\n* it can represent the entity that created the task;\n* it can limit addition of new tasks to a task group: the caller of\n    `createTask` must have a scope related to the `schedulerId` of the task\n    group;\n* it controls who can manipulate tasks, again by requiring\n    `schedulerId`-related scopes; and\n* it appears in the routing key for Pulse messages about the task.\n",
      "type": "string",
      "default": "-",
      "minLength": 1,
      "maxLength": 22,
      "pattern": "^([a-zA-Z0-9-_]*)$"
    },
    "taskGroupId": {
      "title": "Task-Group Identifier",
      "description": "Identifier for a group of tasks scheduled together with this task.\nGenerally, all tasks related to a single event such as a version-control\npush or a nightly build have the same `taskGroupId`.  This property\ndefaults to `taskId` if it isn't specified.  Tasks with `taskId` equal to\nthe `taskGroupId` are, [by convention](/docs/manual/using/task-graph),\ndecision tasks.\n",
      "type": "string",
      "pattern": "^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$"
    },
    "dependencies": {
      "title": "Task Dependencies",
      "description": "List of dependent tasks. These must either be _completed_ or _resolved_\nbefore this task is scheduled. See `requires` for semantics.\n",
      "type": "array",
      "default": [],
      "items": {
        "title": "Task Dependency",
        "description": "The `taskId` of a task that must be resolved before this task is\nscheduled.\n",
        "type": "string",
        "pattern": "^[A-Za-z0-9_-]{8}[Q-T][A-Za-z0-9_-][CGKOSWaeimquy26-][A-Za-z0-9_-]{10}[AQgw]$"
      },
      "maxItems": 100,
      "uniqueItems": true
    },
    "requires": {
      "title": "Dependency Requirement Semantics",
      "description": "The tasks relation to its dependencies. This property specifies the\nsemantics of the `task.dependencies` property.\nIf `all-completed` is given the task will be scheduled when all\ndependencies are resolved _completed_ (successful resolution).\nIf `all-resolved` is given the task will be scheduled when all dependencies\nhave been resolved, regardless of what their resolution is.\n",
      "type": "string",
      "enum": [
        "all-completed",
        "all-resolved"
      ],
      "default": "all-completed"
    },
    "routes": {
      "title": "Task Specific Routes",
      "description": "List of task-specific routes. Pulse messages about the task will be CC'ed to\n`route.<value>` for each `<value>` in this array.\n",
      "type": "array",
      "default": [],
      "items": {
        "title": "Task Specific Route",
        "description": "A task specific route.\n",
        "type": "string",
        "maxLength": 249,
        "minLength": 1
      },
      "maxItems": 64,
      "uniqueItems": true
    },
    "priority": {
      "title": "Task Priority",
      "description": "Priority of task. This defaults to `lowest` and the scope\n`queue:create-task:<priority>/<provisionerId>/<workerType>` is required\nto define a task with `<priority>`. The `normal` priority is treated as\n`lowest`.\n",
      "type": "string",
      "default": "lowest",
      "enum": [
        "highest",
        "very-high",
        "high",
        "medium",
        "low",
        "very-low",
        "lowest",
        "normal"
      ]
    },
    "retries": {
      "title": "Retries",
      "description": "Number of times to retry the task in case of infrastructure issues.\nAn _infrastructure issue_ is a worker node that crashes or is shutdown,\nthese events are to be expected.\n",
      "type": "integer",
      "minimum": 0,
      "maximum": 49,
      "default": 5
    },
    "created": {
      "title": "Created",
      "description": "Creation time of task",
      "type": "string",
      "format": "date-time"
    },
    "deadline": {
      "title": "Deadline",
      "description": "Deadline of the task, `pending` and `running` runs are\nresolved as **exception** if not resolved by other means\nbefore the deadline. Note, deadline cannot be more than\n5 days into the future\n",
      "type": "string",
      "format": "date-time"
    },
    "expires": {
      "title": "Expiration",
      "description": "Task expiration, time at which task definition and status is deleted.\nNotice that all artifacts for the task must have an expiration that is no\nlater than this. If this property isn't it will be set to `deadline`\nplus one year (this default may change).\n",
      "type": "string",
      "format": "date-time"
    },
    "scopes": {
      "title": "Scopes",
      "description": "List of scopes that the task is authorized to use during its execution.\n",
      "type": "array",
      "items": {
        "type": "string",
        "name": "Scope",
        "description": "A single scope. A scope must be composed of\nprintable ASCII characters and spaces.  Scopes ending in more than\none `*` character are forbidden.\n",
        "pattern": "^[ -~]*$"
      }
    },
    "payload": {
      "title": "Task Payload",
      "description": "Task-specific payload following worker-specific format.\nRefer to the documentation for the worker implementing\n`<provisionerId>/<workerType>` for details.\n",
      "type": "object"
    },
    "metadata": {
      "$ref": "task-metadata.json#"
    },
    "tags": {
      "title": "Tags",
      "description": "Arbitrary key-value tags (only strings limited to 4k). These can be used\nto attach informal metadata to a task. Use this for informal tags that\ntasks can be classified by. You can also think of strings here as\ncandidates for formal metadata. Something like\n`purpose: 'build' || 'test'` is a good example.\n",
      "type": "object",
      "default": {},
      "additionalProperties": {
        "type": "string",
        "maxLength": 4096
      }
    },
    "extra": {
      "title": "Extra Data",
      "description": "Object with properties that can hold any kind of extra data that should be\nassociated with the task. This can be data for the task which doesn't\nfit into `payload`, or it can supplementary data for use in services\nlistening for events from this task. For example this could be details to\ndisplay on _treeherder_, or information for indexing the task. Please, try\nto put all related information under one property, so `extra` data keys\nfor treeherder reporting and task indexing don't conflict, hence, we have\nreusable services. **Warning**, do not stuff large data-sets in here --\ntask definitions should not take-up multiple MiBs.\n",
      "type": "object",
      "default": {}
    }
  },
  "additionalProperties": false,
  "required": [
    "provisionerId",
    "workerType",
    "schedulerId",
    "taskGroupId",
    "dependencies",
    "requires",
    "routes",
    "priority",
    "retries",
    "created",
    "deadline",
    "scopes",
    "payload",
    "metadata",
    "tags",
    "extra"
  ],
  "$id": "/schemas/queue/v1/task.json#"
}