{
  "$schema": "/schemas/common/exchanges-reference-v0.json#",
  "serviceName": "queue",
  "apiVersion": "v1",
  "title": "Queue AMQP Exchanges",
  "description": "The queue service is responsible for accepting tasks and track their state\nas they are executed by workers. In order ensure they are eventually\nresolved.\n\nThis document describes AMQP exchanges offered by the queue, which allows\nthird-party listeners to monitor tasks as they progress to resolution.\nThese exchanges targets the following audience:\n * Schedulers, who takes action after tasks are completed,\n * Workers, who wants to listen for new or canceled tasks (optional),\n * Tools, that wants to update their view as task progress.\n\nYou'll notice that all the exchanges in the document shares the same\nrouting key pattern. This makes it very easy to bind to all messages\nabout a certain kind tasks.\n\n**Task specific routes**, a task can define a task specific route using\nthe `task.routes` property. See task creation documentation for details\non permissions required to provide task specific routes. If a task has\nthe entry `'notify.by-email'` in as task specific route defined in\n`task.routes` all messages about this task will be CC'ed with the\nrouting-key `'route.notify.by-email'`.\n\nThese routes will always be prefixed `route.`, so that cannot interfere\nwith the _primary_ routing key as documented here. Notice that the\n_primary_ routing key is always prefixed `primary.`. This is ensured\nin the routing key reference, so API clients will do this automatically.\n\nPlease, note that the way RabbitMQ works, the message will only arrive\nin your queue once, even though you may have bound to the exchange with\nmultiple routing key patterns that matches more of the CC'ed routing\nrouting keys.\n\n**Delivery guarantees**, most operations on the queue are idempotent,\nwhich means that if repeated with the same arguments then the requests\nwill ensure completion of the operation and return the same response.\nThis is useful if the server crashes or the TCP connection breaks, but\nwhen re-executing an idempotent operation, the queue will also resend\nany related AMQP messages. Hence, messages may be repeated.\n\nThis shouldn't be much of a problem, as the best you can achieve using\nconfirm messages with AMQP is at-least-once delivery semantics. Hence,\nthis only prevents you from obtaining at-most-once delivery semantics.\n\n**Remark**, some message generated by timeouts maybe dropped if the\nserver crashes at wrong time. Ideally, we'll address this in the\nfuture. For now we suggest you ignore this corner case, and notify us\nif this corner case is of concern to you.",
  "exchangePrefix": "exchange/taskcluster-queue/v1/",
  "entries": [
    {
      "type": "topic-exchange",
      "exchange": "task-defined",
      "name": "taskDefined",
      "title": "Task Defined Messages",
      "description": "When a task is created or just defined a message is posted to this\nexchange.\n\nThis message exchange is mainly useful when tasks are scheduled by a\nscheduler that uses `defineTask` as this does not make the task\n`pending`. Thus, no `taskPending` message is published.\nPlease, note that messages are also published on this exchange if defined\nusing `createTask`.",
      "schema": "v1/task-defined-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-pending",
      "name": "taskPending",
      "title": "Task Pending Messages",
      "description": "When a task becomes `pending` a message is posted to this exchange.\n\nThis is useful for workers who doesn't want to constantly poll the queue\nfor new tasks. The queue will also be authority for task states and\nclaims. But using this exchange workers should be able to distribute work\nefficiently and they would be able to reduce their polling interval\nsignificantly without affecting general responsiveness.",
      "schema": "v1/task-pending-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-running",
      "name": "taskRunning",
      "title": "Task Running Messages",
      "description": "Whenever a task is claimed by a worker, a run is started on the worker,\nand a message is posted on this exchange.",
      "schema": "v1/task-running-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "artifact-created",
      "name": "artifactCreated",
      "title": "Artifact Creation Messages",
      "description": "Whenever the `createArtifact` end-point is called, the queue will create\na record of the artifact and post a message on this exchange. All of this\nhappens before the queue returns a signed URL for the caller to upload\nthe actual artifact with (pending on `storageType`).\n\nThis means that the actual artifact is rarely available when this message\nis posted. But it is not unreasonable to assume that the artifact will\nwill become available at some point later. Most signatures will expire in\n30 minutes or so, forcing the uploader to call `createArtifact` with\nthe same payload again in-order to continue uploading the artifact.\n\nHowever, in most cases (especially for small artifacts) it's very\nreasonable assume the artifact will be available within a few minutes.\nThis property means that this exchange is mostly useful for tools\nmonitoring task evaluation. One could also use it count number of\nartifacts per task, or _index_ artifacts though in most cases it'll be\nsmarter to index artifacts after the task in question have completed\nsuccessfully.",
      "schema": "v1/artifact-created-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-completed",
      "name": "taskCompleted",
      "title": "Task Completed Messages",
      "description": "When a task is successfully completed by a worker a message is posted\nthis exchange.\nThis message is routed using the `runId`, `workerGroup` and `workerId`\nthat completed the task. But information about additional runs is also\navailable from the task status structure.",
      "schema": "v1/task-completed-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-failed",
      "name": "taskFailed",
      "title": "Task Failed Messages",
      "description": "When a task ran, but failed to complete successfully a message is posted\nto this exchange. This is same as worker ran task-specific code, but the\ntask specific code exited non-zero.",
      "schema": "v1/task-failed-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-exception",
      "name": "taskException",
      "title": "Task Exception Messages",
      "description": "Whenever Taskcluster fails to run a message is posted to this exchange.\nThis happens if the task isn't completed before its `deadlìne`,\nall retries failed (i.e. workers stopped responding), the task was\ncanceled by another entity, or the task carried a malformed payload.\n\nThe specific _reason_ is evident from that task status structure, refer\nto the `reasonResolved` property for the last run.",
      "schema": "v1/task-exception-message.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskId",
          "summary": "`taskId` for the task this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "runId",
          "summary": "`runId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerGroup",
          "summary": "`workerGroup` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "workerId",
          "summary": "`workerId` of latest run for the task, `_` if no run is exists for the task.",
          "multipleWords": false,
          "required": false
        },
        {
          "name": "provisionerId",
          "summary": "`provisionerId` this task is targeted at.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "workerType",
          "summary": "`workerType` this task must run on.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` this task was created by.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` this task was created in.",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    },
    {
      "type": "topic-exchange",
      "exchange": "task-group-resolved",
      "name": "taskGroupResolved",
      "title": "Task Group Resolved Messages",
      "description": "A message is published on task-group-resolved whenever all submitted\ntasks (whether scheduled or unscheduled) for a given task group have\nbeen resolved, regardless of whether they resolved as successful or\nnot. A task group may be resolved multiple times, since new tasks may\nbe submitted against an already resolved task group.",
      "schema": "v1/task-group-resolved.json#",
      "routingKey": [
        {
          "name": "routingKeyKind",
          "summary": "Identifier for the routing-key kind. This is always `'primary'` for the formalized routing key.",
          "constant": "primary",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "taskGroupId",
          "summary": "`taskGroupId` for the task-group this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "schedulerId",
          "summary": "`schedulerId` for the task-group this message concerns",
          "multipleWords": false,
          "required": true
        },
        {
          "name": "reserved",
          "summary": "Space reserved for future routing-key entries, you should always match this entry with `#`. As automatically done by our tooling, if not specified.",
          "multipleWords": true,
          "required": false
        }
      ]
    }
  ]
}